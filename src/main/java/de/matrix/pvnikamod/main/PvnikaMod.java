package de.matrix.pvnikamod.main;

import de.matrix.pvnikamod.config.Config;
import de.matrix.pvnikamod.listener.*;
import de.matrix.pvnikamod.renderer.HitboxRenderer;
import de.matrix.pvnikamod.modutils.ZoomUtils;
import net.minecraft.client.Minecraft;
import net.minecraft.client.settings.KeyBinding;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.ClientCommandHandler;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.fml.client.registry.ClientRegistry;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;

@Mod(
        modid = "pvnikamod",
        name = "Pvnika Mod",
        version = "beta",
        acceptedMinecraftVersions = "[1.8.9]",
        clientSideOnly = true
)
public class PvnikaMod {

    public static final String MODID = "Pvnika Mod";
    public static File FOLDER_FILE;
    public static final File CONFIG_FILE;
    private Config config;
    public static final String PREFIX = "[PvnikaMod] ";
    private boolean loaded;
    private static PvnikaMod instance;
    public Minecraft mc;
    public static PvnikaMod mod;
    public static Logger logger = LogManager.getLogger("PvnikaMod");
    private Events events;
    private Chat chat;
    public TabList tabList;
    public ZoomUtils zoomUtils;
    public HitboxRenderer hitboxRenderer;

    public static KeyBinding openPvnikaGui = new KeyBinding("Open Pvnika GUI", 54, "Pvnika Mod");
    public static KeyBinding zoomKey = new KeyBinding("Zoom", 16, "Pvnika Mod");
    public static final ResourceLocation pvnikaLogo = new ResourceLocation("textures/gui/container/inventory.png");


    @EventHandler
    public void preInit(FMLPreInitializationEvent event){
        logger.info(PREFIX + "Initializing PvnikaMod");
        ModMetadata data = event.getModMetadata();
        data.autogenerated = false;
        data.name = EnumChatFormatting.BLUE + "PvnikaMod";
        data.version = EnumChatFormatting.RED + "b0.9.2";
        data.description = EnumChatFormatting.LIGHT_PURPLE + "Multifunctional Minecraft Mod";
        data.credits = EnumChatFormatting.GREEN + "by MatrixCodeDE";
        data.logoFile = "assets/pvnikamod/images/logo.png";
        PvnikaMod.mod = PvnikaMod.this;
        PvnikaMod.this.mc = Minecraft.getMinecraft();

        logger.info(PREFIX + "Loading Config");
        FOLDER_FILE = new File(Minecraft.getMinecraft().mcDataDir, "pvnika");
        File configFile = new File(FOLDER_FILE, "pvnikamod.cfg");
        this.config = new Config(configFile);

        this.config.loadConfig();
        logger.info(PREFIX + "Successfully loaded Config");
        logger.info(PREFIX + "Loading Mods");
        ClientRegistry.registerKeyBinding(openPvnikaGui);
        ClientRegistry.registerKeyBinding(zoomKey);
        this.zoomUtils = new ZoomUtils();
        this.hitboxRenderer = new HitboxRenderer();
        logger.info(PREFIX + "Successfully loaded Mods");
    }


    @EventHandler
    public void init(FMLInitializationEvent event) {
        this.events = new Events();
        this.chat = new Chat();
        this.tabList = new TabList(this.mc, this.mc.ingameGUI);
        MinecraftForge.EVENT_BUS.register(this.events);
        MinecraftForge.EVENT_BUS.register(this.chat);
        MinecraftForge.EVENT_BUS.register(this.tabList);
        ClientCommandHandler.instance.registerCommand(new Commands());
        logger.info(PREFIX + "Initialization complete");
    }



    static {
        FOLDER_FILE = new File(Minecraft.getMinecraft().mcDataDir, "config");
        CONFIG_FILE = new File(FOLDER_FILE, "pvnikamod.cfg");
    }

    public static PvnikaMod getInstance() {
        if(mod == null) {
            mod = new PvnikaMod();
        }
        return mod;
    }

    public Config getConfig() {
        return this.config;
    }
}
